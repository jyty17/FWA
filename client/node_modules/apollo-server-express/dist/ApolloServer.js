"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cors_1 = __importDefault(require("cors"));
const body_parser_1 = require("body-parser");
const http_1 = require("http");
const graphql_playground_middleware_express_1 = __importDefault(require("graphql-playground-middleware-express"));
const apollo_server_core_1 = require("apollo-server-core");
const accepts_1 = __importDefault(require("accepts"));
const expressApollo_1 = require("./expressApollo");
const apollo_upload_server_1 = require("apollo-upload-server");
const gql = String.raw;
const fileUploadMiddleware = (uploadsConfig, server) => (req, res, next) => {
    if (req.is('multipart/form-data')) {
        apollo_upload_server_1.processRequest(req, uploadsConfig)
            .then(body => {
            req.body = body;
            next();
        })
            .catch(error => {
            if (error.status && error.expose)
                res.status(error.status);
            next(apollo_server_core_1.formatApolloErrors([error], {
                formatter: server.requestOptions.formatError,
                debug: server.requestOptions.debug,
                logFunction: server.requestOptions.logFunction,
            }));
        });
    }
    else {
        next();
    }
};
exports.registerServer = async ({ app, server, path, cors, bodyParserConfig, disableHealthCheck, onHealthCheck, uploads, }) => {
    if (!path)
        path = '/graphql';
    if (!disableHealthCheck) {
        app.use('/.well-known/apollo/server-health', (req, res) => {
            res.type('application/health+json');
            if (onHealthCheck) {
                onHealthCheck(req)
                    .then(() => {
                    res.json({ status: 'pass' });
                })
                    .catch(() => {
                    res.status(503).json({ status: 'fail' });
                });
            }
            else {
                res.json({ status: 'pass' });
            }
        });
    }
    let uploadsMiddleware;
    if (uploads !== false) {
        server.enhanceSchema({
            typeDefs: gql `
        scalar Upload
      `,
            resolvers: { Upload: apollo_upload_server_1.GraphQLUpload },
        });
        uploadsMiddleware = fileUploadMiddleware(typeof uploads !== 'boolean' ? uploads : {}, server);
    }
    server.use({
        path,
        getHttp: () => http_1.createServer(app),
    });
    app.use(path, cors_1.default(cors), body_parser_1.json(bodyParserConfig), uploadsMiddleware ? uploadsMiddleware : (_req, _res, next) => next(), (req, res, next) => {
        if (!server.disableTools && req.method === 'GET') {
            const accept = accepts_1.default(req);
            const types = accept.types();
            const prefersHTML = types.find((x) => x === 'text/html' || x === 'application/json') === 'text/html';
            if (prefersHTML) {
                return graphql_playground_middleware_express_1.default({
                    endpoint: path,
                    subscriptionEndpoint: server.subscriptionsPath,
                })(req, res, next);
            }
        }
        return expressApollo_1.graphqlExpress(server.graphQLServerOptionsForRequest.bind(server))(req, res, next);
    });
};
//# sourceMappingURL=ApolloServer.js.map